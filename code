import json
import os
import requests
import sys
import time
import pandas as pd
from sqlalchemy import create_engine
import pyodbc

class BaiDuPOI(object):
    def __init__(self, itemy, loc):
        self.itemy = itemy
        self.loc = loc

    def urls(self):
        #api_key = baidu_api
        urls = []
        for pages in range(0, 10):
            url = 'https://api.map.baidu.com/place/v2/search?query=' + self.itemy + '&bounds=' + self.loc + '&page_size=20&page_num=' + str(
                pages) + '&output=json&ak=**yourak**'
            urls.append(url)
        return urls

    def baidu_search(self):
        try:
            global url
            for i, url in enumerate(self.urls()):
                print(i, url)
                json_obj = requests.get(url).text
                data = json.loads(json_obj)
                if data['total'] != 0:
                    for item in data['results']:
                        json_sel = {}
                        json_sel['h1'] = h1
                        json_sel['h2'] = h2
                        json_sel['name'] = item["name"]
                        json_sel['lat'] = item["location"]["lat"]
                        json_sel['lng'] = item["location"]["lng"]
                        yield json_sel
                else:
                    print('本页及以后无数据')
                    break
        except:
            print('one error')
            with open('./log.txt', 'a', encoding='utf-8') as fl:
                fl.write(url + '\n')


class LocaDiv(object):
    def __init__(self, loc_all, divd):
        self.loc_all = loc_all
        self.divd = divd

    def lat_all(self):
        lat_sw = float(self.loc_all.split(',')[0])
        lat_ne = float(self.loc_all.split(',')[2])
        lat_list = [str(lat_ne)]
        while lat_ne - lat_sw >= 0:
            m = lat_ne - self.divd
            lat_ne = lat_ne - self.divd
            lat_list.append('%.2f' % m)
        return sorted(lat_list)

    def lng_all(self):
        lng_sw = float(self.loc_all.split(',')[1])
        lng_ne = float(self.loc_all.split(',')[3])
        lng_list = [str(lng_ne)]
        while lng_ne - lng_sw >= 0:
            m = lng_ne - self.divd
            lng_ne = lng_ne - self.divd
            lng_list.append('%.2f' % m)
        return sorted(lng_list)

    def ls_com(self):
        l1 = self.lat_all()
        l2 = self.lng_all()
        ab_list = []
        for i in range(0, len(l1)):
            a = str(l1[i])
            for i2 in range(0, len(l2)):
                b = str(l2[i2])
                ab = a + ',' + b
                ab_list.append(ab)
        return ab_list

    def ls_row(self):
        l1 = self.lat_all()
        l2 = self.lng_all()
        ls_com_v = self.ls_com()
        ls = []
        for n in range(0, len(l1) - 1):
            for i in range(len(l2) * n, len(l2) * (n + 1) - 1):
                a = ls_com_v[i]
                b = ls_com_v[i + len(l2) + 1]
                ab = a + ',' + b
                ls.append(ab)
        return ls


if __name__ == '__main__':
    engine = create_engine('mssql+pyodbc://**sql sever account:password**/baidu_poi?driver=SQL server')
    pois = {'商业': ['酒店', '购物', '金融'],
            '行政机构': ['政府机构'],
            '停车场': ['停车场'],
            '旅游景点': ['旅游景点'],
            '工业': ['公司企业'],
            '餐饮': ['美食'],
            '娱乐': ['休闲娱乐'],
            '教育': ['高等院校', '中学', '小学', '幼儿园', '成人教育', '亲子教育', '特殊教育学校'],
            '医疗': ['医疗'],
            '文化设施': ['图书馆', '科技馆', '新闻出版', '广播电视', '艺术团体', '美术馆', '展览馆', '文化宫'],
            '商务办公': ['科研机构', '写字楼'],
            '交通服务设施': ['飞机场', '火车站', '地铁站', '长途汽车站', '公交车站', '港口', '加油加气站', '服务区', '收费站', '桥', '充电站', '路侧停车位']}
    #baidu_api = '**yourak**'  # 这里填入你的百度API
    print("开始爬数据，请稍等...")
    start_time = time.time()
    loc = LocaDiv('30.35747,120.06512,31.21220,120.31094', 0.2)  # 填入爬取区域坐标、子区域长宽，此处选取的是以杭州主城区为主的矩形区域
    locs_to_use = loc.ls_row()
    for h1, v in pois.items():
        print('爬取：', h1)
        file_name = './data/baidu_poi_{}'.format(h1)
        for loc_to_use in locs_to_use:
            for h2 in v:
                par = BaiDuPOI(h2, loc_to_use)  
                dt = par.baidu_search()
                df = pd.DataFrame(dt)
                if len(df) != 0:
                    print(df)
                    df.to_sql(file_name, engine, if_exists='append')
                    time.sleep(1)
                else:
                    pass
    end_time = time.time()
    print("数据爬取完毕，用时%.2f秒" % (end_time - start_time))
